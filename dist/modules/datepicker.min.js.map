{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","touchClickEmulationDisabled","isNative","isTouch","DatepickerFactory","element","$get","options","$datepicker","$options","pickerViews","views","el","selected","date","focus","viewDate","scope","$iconLeft","$iconRight","$hasToday","$picker","$select","disabled","select","$selectPane","value","$views","$mode","$toggleMode","Date","length","$setToday","$clear","setMode","update","isDate","$date","updateDisabledDates","disabledDateRanges","dateRanges","forEach","i","$build","controller","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","$isSelected","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","hide","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$scope","link","datepickerViews","require","$window","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","key","isDefined","$eval","bsKey","lang","format","dateParser","$dateParser","strict","bsShow","isString","newValue","$watch","oldValue","match","validateAgainstMinMaxDate","$observe","disabledDates","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","parse","split","size","arrays","mod","n","m","arr","splice","$dateFormatter","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","push","isToday","toDateString","today","muted","label","title","showLabels","labels","isTodayDisabled","isSelected","time","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}