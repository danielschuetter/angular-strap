{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","modal/modal.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","alert/alert.js","aside/aside.js","button/button.js","collapse/collapse.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","backdropAnimation","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","stopEventPropagation","unbindAutoCloseEvents","$body","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","prefixClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","touchClickEmulationDisabled","lang","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AsideFactory","$aside","bsAside","aside","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","isActive","checked","toggleClass","bind","toggleEvent","v","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","$registerTarget","action","inlineStyles","AffixFactory","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            if (tipElement !== null) {\n              tipElement.on('click', stopEventPropagation);\n            }\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager',\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false,\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n          $modal.focus();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n          $modal.focus();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            if (tipElement !== null) {\n              tipElement.on('click', stopEventPropagation);\n            }\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager',\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false,\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      touchClickEmulationDisabled: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch && !options.touchClickEmulationDisabled) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'touchClickEmulationDisabled'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}